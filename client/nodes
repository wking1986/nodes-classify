#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'json'
require 'net/http'



if ARGV.first.nil?
  ARGV.push "-h"
else 
  subcommand = ARGV.shift
  ARGV.push "-h" unless %w{ search insert change delete }.include?(subcommand)
end

options={}
global = OptionParser.new do |opts|
  opts.banner = "Usage: nodes [search|insert|change|delete] [options]"
  opts.separator ""
  opts.separator "    nodes search: search node or tags"
  opts.separator "        nodes search -p|--project=project [--tags=tags1[,|+tags2]] [--status=running] [-x|--exclude-nodes=[node1[,node2]]]"
  opts.separator "            default: find all nodes(running or offline)"
  opts.separator "            tags separate by ',' or '+'"
  opts.separator "            exclude nodes separate by ',' "
  opts.separator "        nodes search -n|--node=node"
  opts.separator ""
  opts.separator "    nodes insert : insert node"
  opts.separator "        nodes insert -n|--node=node -p|--project=project --tags=tags1[,tags2,tags3] [--status=offline]"
  opts.separator "            default: set status=offline"
  opts.separator "            tags separate by ','"
  opts.separator ""
  opts.separator "    nodes change : change node"
  opts.separator "        nodes change -n|--node=node [--status=offline] [-p|--project=project] [--tags=tags1[,tags2]]"
  opts.separator "            tags separate by ','"
  opts.separator ""
  opts.separator "    nodes delete: delete node."
  opts.separator "        nodes delete -n|--node=node"
  opts.separator ""
  opts.separator ""
  opts.on("-p", "--project=project", String,
          "Project name, such as: IM") { |v| options[:project] = v }
  opts.on("-n", "--node=node", String,
          "Node name, such as: yf-imcap-as00.yf01") { |v| options[:node] = v }
  opts.on("-t", "--tags=tags", String,
        "When specifying more than one tag, use the comma to specify a boolean OR operation, and a plus-sign ('+') to specify a boolean AND operation. To require both tags 'as' and 'jx', specify 'as+jx' This will match nodes that have both tags only. To match any nodes that have one or the other tags, use 'as,bs'.") { |v| options[:tags] = v }
  opts.on("-s", "--status=status", String,
          "Node status : running or offline") { |v| options[:status] = v }
  opts.on("-x", "--exclude-nodes=nodes", String,
          "Exclude nodes, such as: server1,server2,server3, nodes separate by ','") { |v| options[:xnodes] = v }
  opts.on("--service=service", String,
          "service url : default: ai-imci-control00.ai01:8989") { |v| options[:service] = v }
  opts.separator ""
  opts.on("-h", "--help", "Show this help message.") { puts opts; exit }

end.parse!


def ping_host(host) 
  result = `ping #{host} -c1 2>/dev/null`
  result =~ /^.*\((\d+.\d+.\d+.\d+)\).*$/ 
  return $1 ? true : false
end

class Array
  def repeat?
    return self == self.uniq ? false : true
  end 
end

def get_node_by_tag(project,query)

  url = "http://#{@service_url}/search_project.json?project=#{project}" 
  resp = Net::HTTP.get_response(URI.parse(url))
  resp_text = resp.body
  json = JSON.parse(resp_text)
  id = json["id"]
  puts "Fatal: project[#{project}] id not exist." unless id

  url = "http://#{@service_url}/search_servers.json?#{query}" 
  resp = Net::HTTP.get_response(URI.parse(url))
  resp_text = resp.body
  json = JSON.parse(resp_text)
  json.select { |node| node["project_id"] == id } 
end

def get_nodes(project, tags)
  @query
  return get_node_by_tag(project, "") unless tags
  if tags =~ /^[_\w\d,+]+$/
    if tags =~ /.*\+.*/
      @query = tags.split('+').map do |tag| 
        if get_tag_id(tag) 
          "tag_names[]=#{tag}" 
        else 
          puts "Fatal: tag: #{tag} not exist."
          exit 112
        end
      end.join("&") + "&logic=AND"

    elsif tags =~ /.*,.*/
      @query = tags.split(',').map do |tag| 
        if get_tag_id(tag)
          "tag_names[]=#{tag}" 
        else
          puts "Fatal: tag: #{tag} not exist."
          exit 112
        end
      end.join("&") + "&logic=OR"
    else 
      @query = "tag_names[]=#{tags}"
    end
  else 
    puts "Fatal: --tags format error. Please check."
    exit 121
  end
  get_node_by_tag(project, @query)
end

def get_node_info(name)
  url = "http://#{@service_url}/search_node_info.json?name=#{name}" # ACME boomerang
  resp = Net::HTTP.get_response(URI.parse(url))
  resp_text = resp.body
  json = JSON.parse(resp_text)
end

def get_project_id(project_name)
  url = "http://#{@service_url}/projects.json"
  resp = Net::HTTP.get_response(URI.parse(url))
  resp_text = resp.body
  json = JSON.parse(resp_text)
  json.select { |x| x["name"] == project_name }.map { |x| x["id"] }.first
end

def get_tag_id(tag_name)
  url = "http://#{@service_url}/tags.json"
  resp = Net::HTTP.get_response(URI.parse(url))
  resp_text = resp.body
  json = JSON.parse(resp_text)
  json.select { |x| x["name"] == tag_name }.map { |x| x["id"] }.first
end

def is_node_exist(node_name)
  url = "http://#{@service_url}/servers.json"
  resp = Net::HTTP.get_response(URI.parse(url))
  resp_text = resp.body
  json = JSON.parse(resp_text)
  @nodes = json.select { |x| x["name"] == node_name }.map { |x| x["id"] }
  not @nodes.empty?
end

@legal_status = %w{ running offline }
@service_url = options[:service] || "ai-imci-control00.ai01:8989"
@node_name = options[:node]
@status = options[:status] 
@project_name = options[:project]
@tags_args = options[:tags] || ""
if @tags_args.split(",").repeat?
  puts "Wrong: tags:" + @tags_args + " repeat."
  exit 101
end

if @status
  unless @legal_status.include?(@status)
    puts "illegal status. #{@status}" 
    exit 100
  end
end
if @project_name
  @project_id = get_project_id(@project_name)
  unless @project_id
    puts "Project:" + @project_name + " not exist. You should add it. \n" + "Please visit http://#{@service_url}/projects" 
    exit 100
  end
end

case subcommand
when 'search'
  if ( @project_name and @node_name )
    puts "Fatal: -p and -n could not set same time when search."
    exit 121
  end

  if ( not @project_name and not @node_name )
    puts "Fatal: -p or -n should set one when search." 
    exit 121
  end
  ## search nodes 
  if @project_name 

    @xnodes = options[:xnodes] ? options[:xnodes].split(',') : []
    @xnodes.each do |node|
      unless is_node_exist(node)
        puts "Node: #{node} not exist."
        exit 100
      end
    end
    ## set --status
    if @status
      puts get_nodes(@project_name, options[:tags]).select { |node| node["status"] == @status }.map { |node| node["name"] }.reject { |node| @xnodes.include?(node) } 
    else 
      puts get_nodes(@project_name, options[:tags]).map { |node| node["name"] }.reject { |node| @xnodes.include?(node) } 
    end 
  end

  ## search node info
  if @node_name
    unless is_node_exist(@node_name)
      puts "Node: #{@node_name} not exist."
      exit 100
    end
    puts get_node_info(@node_name).to_yaml 
  end

when 'insert'
  @status = @status || "offline"
  unless @node_name
    puts "-n|--node must be set"   
    exit 121
  end 
  unless ping_host(@node_name)
    puts "Ping #{@node_name} , no response."
    exit 122
  end
  unless @project_name
    puts "-p|--project must be set" 
    exit 121
  end
  unless options[:tags]
    puts "--tags must be set"  
    exit 121
  end
  

  @tag_ids = []
  options[:tags].split(",").uniq.each  do |tag| 
    @tag_id = get_tag_id(tag)
    unless @tag_id
      puts "Tag: #{tag} not exist. You should add it. \n" + "Please  visit http://#{@service_url}/tags" 
      exit 121
    end
    @tag_ids.push @tag_id
  end

  @node_name.sub!(/.baidu.com/, '') ; 
  if is_node_exist(@node_name)
    puts "Node: " + @node_name + " already exist. Please check."
    exit 121
  end

  @curl_tag_args = @tag_ids.map { |tag_id| "-d tag_ids[]=#{tag_id}" }.join(" ")
  @curl_args = "curl -d 'server[name]=#{@node_name}' -d 'server[project_id]=#{@project_id}' -d 'server[status]=#{@status}' #{@curl_tag_args} -f http://#{@service_url}/servers &>/dev/null"
  if system(@curl_args)
    puts "Notice: Add node success. #{@node_name}"
  else 
    puts "Fatal: Add node fail. #{@node_name}"
    exit 123
  end

when 'change'

  if @project_name 
    @project_id = get_project_id(@project_name)
    unless @project_id
      puts "Project:" + @project_name + " not exist. You should add it. \n" + "Please visit http://#{@service_url}/projects" 
      exit 121
    end
  end 

  @tag_ids = []
  if options[:tags]
    options[:tags].split(",").uniq.each  do |tag| 
      @tag_id = get_tag_id(tag)
      unless @tag_id
        puts "Tag: #{tag} not exist. You should add it. \n" + "Please  visit http://#{@service_url}/tags" 
        exit 121
      end
      @tag_ids.push @tag_id
    end
  end

  unless @node_name
    puts "-n|--node must be set" 
    exit 111 
  end

  @node_id = get_node_info(@node_name)["id"]
  unless @node_id
    puts "Fatal: node: #{@node_name} not exist. please check"
    exit 121
  end

  if ( not @status and not @project_id and @tag_ids.empty? ) 
    puts "Nothing changed."
    exit 
  end

  @curl_args_status = @status ? "-d 'server[status]=#{@status}'" : ""
  @curl_args_tags = @tag_ids.empty? ? "" : @tag_ids.map { |id| "-d 'tag_ids[]=#{id}'"}.join(" ")
  @curl_args_project = @project_id ? "-d 'server[project_id]=#{@project_id}'" : ""

  @curl_command = "curl -X PUT #{@curl_args_project} #{@curl_args_tags} #{@curl_args_status} -f http://#{@service_url}/servers/#{@node_id} &>/dev/null"
  if system(@curl_command)
    puts "Notice: Change node[#{@node_name}] success." 
  else
    puts "Fatal: Change node[#{@node_name}] fail."
    exit 123
  end

when 'delete'
  unless @node_name
    puts "-n|--node must be set" 
    exit 111 
  end
  @node_id = get_node_info(@node_name)["id"]
  unless @node_id
    puts "Fatal: node: #{@node_name} not exist. please check"
    exit 121
  end
  @curl_args = "curl -X DELETE http://#{@service_url}/servers/#{@node_id} &>/dev/null"
  if system(@curl_args)
    puts "Notice: Delete node[#{@node_name}] success."
  else
    puts "Fatal: Delete node[#{@node_name}] fail."
    exit 123
  end
end

